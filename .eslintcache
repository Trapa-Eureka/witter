[{"/Volumes/Elements/prev_documents/work/witter/src/index.js":"1","/Volumes/Elements/prev_documents/work/witter/src/components/App.js":"2","/Volumes/Elements/prev_documents/work/witter/src/components/Router.js":"3","/Volumes/Elements/prev_documents/work/witter/src/routes/Home.js":"4","/Volumes/Elements/prev_documents/work/witter/src/routes/Auth.js":"5","/Volumes/Elements/prev_documents/work/witter/src/fbase.js":"6","/Volumes/Elements/prev_documents/work/witter/src/components/Navigation.js":"7","/Volumes/Elements/prev_documents/work/witter/src/routes/Profile.js":"8","/Volumes/Elements/prev_documents/work/witter/src/components/Post.js":"9"},{"size":205,"mtime":1608383349880,"results":"10","hashOfConfig":"11"},{"size":928,"mtime":1608574283060,"results":"12","hashOfConfig":"11"},{"size":1091,"mtime":1608573598030,"results":"13","hashOfConfig":"11"},{"size":2729,"mtime":1608550560970,"results":"14","hashOfConfig":"11"},{"size":2333,"mtime":1608407184700,"results":"15","hashOfConfig":"11"},{"size":667,"mtime":1608485272000,"results":"16","hashOfConfig":"11"},{"size":371,"mtime":1608569763910,"results":"17","hashOfConfig":"11"},{"size":1108,"mtime":1608573643620,"results":"18","hashOfConfig":"11"},{"size":1910,"mtime":1608488443990,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tvlrwc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/Volumes/Elements/prev_documents/work/witter/src/index.js",[],["42","43"],"/Volumes/Elements/prev_documents/work/witter/src/components/App.js",[],"/Volumes/Elements/prev_documents/work/witter/src/components/Router.js",[],"/Volumes/Elements/prev_documents/work/witter/src/routes/Home.js",["44"],"import React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { dbService, storageService } from \"fbase\";\nimport Post from \"components/Post\";\n\nconst Home = ({ userObj }) => {\n    const [post, setPost] = useState(\"\");\n    const [posts, setPosts] = useState([]);\n    const [attachment, setAttachment] = useState(\"\");\n    useEffect (() => {\n        dbService.collection(\"posts\").onSnapshot(snapshot => {\n            const postArray = snapshot.docs.map(doc => ({\n                id: doc.id,\n                ...doc.data(),\n            }));\n            setPosts(postArray);\n        });\n    }, []);\n    const onSubmit = async(event) => {\n        event.preventDefault();\n        let attachmentUrl = \"\";\n        if(attachment !== \"\") {\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const postObj = {\n            text: post,\n            createAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        };\n        await dbService.collection(\"posts\").add(postObj);\n        setPost(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const { \n            target: { value },\n        } = event;\n        setPost(value);\n    };\n    const onFileChange = (event) => {\n        const {\n            target: { files },\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: { result },\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => setAttachment(null);\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input value={post} onChange={onChange} type=\"text\" placeholder=\"What is your plan on Today?\" maxLength={120} />\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n                <input type=\"submit\" value=\"Post\" />\n                {attachment && (\n                    <div>\n                        <img src={attachment} width=\"50px\" height=\"50px\" />\n                        <button onClick={onClearAttachment}>Clear</button>\n                    </div>\n                )}\n            </form>\n            <div>\n                {posts.map((post) => (\n                    <Post key={post.id} postObj={post} isOwner={post.creatorId === userObj.uid} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","/Volumes/Elements/prev_documents/work/witter/src/routes/Auth.js",[],"/Volumes/Elements/prev_documents/work/witter/src/fbase.js",[],"/Volumes/Elements/prev_documents/work/witter/src/components/Navigation.js",[],"/Volumes/Elements/prev_documents/work/witter/src/routes/Profile.js",["45"],"import React, { useState } from \"react\";\nimport { authService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n      authService.signOut();\n      history.push(\"/\");\n    };\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            });\n            refreshUser();\n        }\n    };\n    return (\n      <>\n        <form onSubmit={onSubmit}>\n            <input onChange={onChange} type=\"text\" placeholder=\"Display name\" value={newDisplayName} />\n            <input type=\"submit\" value=\"Update Profile\" />\n        </form>\n        <button onClick={onLogOutClick}>Log Out</button>\n      </>\n    );\n  };","/Volumes/Elements/prev_documents/work/witter/src/components/Post.js",["46"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\n\nconst Post = ({ postObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newPost, setNewPost] = useState(postObj.text);\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this post?\");\n        console.log(ok);\n        if (ok) {\n            await dbService.doc(`posts/${postObj.id}`).delete();\n            await storageService.refFromURL(postObj.attachmentUrl).delete();\n        }\n    };\n    const toggleEditing = () => setEditing((prev) => !prev);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`posts/${postObj.id}`).update({\n            text: newPost,\n        });\n        setEditing(false);\n    };\n    const onChange = (event) => {\n        const {target: { value },} = event;\n        setNewPost(value);\n    };\n    return (\n        <div>\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit}>\n                        <input type=\"text\" placeholder=\"Edit your post\" value={newPost} required onChange={onChange} />\n                        <input type=\"submit\" value=\"Update Post\" />\n                    </form>\n                    <button onClick={toggleEditing}>Cancel</button>\n                </>\n            ) : (\n                <>\n                    <h4>{postObj.text}</h4>\n                    {postObj.attachmentUrl && <img src={postObj.attachmentUrl} width=\"50px\" height=\"50px\" />}\n                    {isOwner && (\n                        <>\n                            <button onClick={onDeleteClick}>Delete Post</button>\n                            <button onClick={toggleEditing}>Edit Post</button>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Post;",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":66,"column":25,"nodeType":"53","endLine":66,"endColumn":76},{"ruleId":"54","severity":1,"message":"55","line":5,"column":1,"nodeType":"56","endLine":36,"endColumn":5},{"ruleId":"51","severity":1,"message":"52","line":40,"column":47,"nodeType":"53","endLine":40,"endColumn":109},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]